except_nightly_cron: &EXCEPT_ON_NIGHTLY_CRON
  only_if: $CIRRUS_CRON != $NIGHTLY_CRON

except_external_pr_or_cron: &EXCEPT_ON_PR_OR_CRON
  only_if: $CIRRUS_PRERELEASE != "true" && $CIRRUS_PR == "" && $CIRRUS_CRON != $NIGHTLY_CRON

only_on_non_release_draft_template: &ONLY_ON_NON_RELEASE_DRAFT_TEMPLATE
  only_if: $CIRRUS_PRERELEASE != "true"

docker_build_container_template: &CONTAINER_TEMPLATE
  dockerfile: .cirrus/Dockerfile
  docker_arguments:
    CIRRUS_AWS_ACCOUNT: ${CIRRUS_AWS_ACCOUNT}
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  builder_role: cirrus-builder
  builder_image: docker-builder-v*
  builder_instance_type: t2.small
  region: eu-central-1
  namespace: default
  cpu: 1
  memory: 1Gb

container_template: &STD_CONTAINER_TEMPLATE
  image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j11-latest
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  region: eu-central-1
  namespace: default
  cpu: 1
  memory: 1Gb

vm_instance_template: &VM_TEMPLATE
  image: docker-builder-v*
  type: t2.xlarge
  region: eu-central-1
  cpu: 4
  memory: 16Gb

clone_script_template: &CLONE_SCRIPT_TEMPLATE
  clone_script: |
    if [ -z "$CIRRUS_PR" ]; then
      git clone --recursive --branch=$CIRRUS_BRANCH https://github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
      git reset --hard $CIRRUS_CHANGE_IN_REPO
    else
      git clone --recursive https://github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
      git fetch origin pull/$CIRRUS_PR/head:pull/$CIRRUS_PR
      git reset --hard $CIRRUS_CHANGE_IN_REPO
    fi

chart_static_compatibility_test: &CHART_STATIC_COMPATIBILITY_TEST_TEMPLATE
  <<: *ONLY_ON_NON_RELEASE_DRAFT_TEMPLATE
  skip: "!changesInclude('charts/**/*', '.cirrus/*')"
  timeout_in: 30m
  eks_container:
    <<: *CONTAINER_TEMPLATE
    cpu: 1
    memory: 1Gb
  <<: *CLONE_SCRIPT_TEMPLATE

chart_testing_on_openshif: &CHART_TESTING_ON_OPENSHIFT_TEMPLATE
  <<: *ONLY_ON_NON_RELEASE_DRAFT_TEMPLATE
  timeout_in: 1h
  eks_container:
    <<: *CONTAINER_TEMPLATE
    cpu: 2
    memory: 4Gb
  authenticate_to_openshift_script:
    - ./.cirrus/openshift_auth.sh
  setup_script:
    - oc new-project "${VERIFYING_CHART}" --display-name="Test Project" --description="This is a test project for testing ${VERIFYING_CHART} from Cirrus" || oc project "${VERIFYING_CHART}"
    - kubectl create secret docker-registry pullsecret --namespace "${VERIFYING_CHART}" --docker-username=${DOCKER_USERNAME} --docker-password=${DOCKER_PASSWORD} --dry-run=client -o yaml | kubectl apply -f -
    - ./.cirrus/build_chart_dependencies.sh charts/"${VERIFYING_CHART}"
    - chart-verifier version
  script:
    - mkdir -p "$(pwd)/report-${VERIFYING_CHART}"
    - chart-verifier verify charts/"${VERIFYING_CHART}" --helm-install-timeout 20m -F charts/"${VERIFYING_CHART}"/openshift-verifier/values.yaml -n "${VERIFYING_CHART}" --openshift-version 4.16 > "$(pwd)/report-${VERIFYING_CHART}/report.yaml"
  verifier_report_artifacts:
    path: "report-*/*.yaml"
  check_violations_script:
    - cat "report-${VERIFYING_CHART}/report.yaml" | ./.cirrus/verify_openshift.sh
  always:
    cleanup_script:
      - oc delete project "${VERIFYING_CHART}"

chart_testing_on_kind: &CHART_TESTING_ON_KIND_TEMPLATE
  <<: *ONLY_ON_NON_RELEASE_DRAFT_TEMPLATE
  skip: "!changesInclude('charts/**/*', '.cirrus/*')"
  timeout_in: 1h
  ec2_instance:
    <<: *VM_TEMPLATE
  <<: *CLONE_SCRIPT_TEMPLATE
  setup_script:
    - ./.cirrus/setup_kind_vm.sh
    - kind create cluster
    - kubectl cluster-info --context kind-kind
    - kubectl get nodes
    - kubectl create namespace test --dry-run=client -o yaml | kubectl apply -f -
    - kubectl create secret docker-registry pullsecret --namespace test --docker-username=${DOCKER_USERNAME} --docker-password=${DOCKER_PASSWORD} --dry-run=client -o yaml | kubectl apply -f -
  artifacthub_lint_script:
    - ah lint

chart_packaging: &CHART_PACKAGING_TASK_TEMPLATE
  <<: *ONLY_ON_NON_RELEASE_DRAFT_TEMPLATE
  timeout_in: 15m
  eks_container:
    <<: *CONTAINER_TEMPLATE
    cpu: 2
    memory: 1Gb
  <<: *CLONE_SCRIPT_TEMPLATE
  environment_cache:
    folder: ${CIRRUS_WORKING_DIR}/*.tgz*
    fingerprint_script: echo $CIRRUS_BUILD_ID
  env:
    GITHUB_TOKEN: VAULT[development/github/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-releases token]
    SONARSOURCE_SIGN_KEY: VAULT[development/kv/data/sign data.key]
    SONARSOURCE_SIGN_KEY_ID: VAULT[development/kv/data/sign data.key_id]
    SONARSOURCE_SIGN_KEY_PASSPHRASE: VAULT[development/kv/data/sign data.passphrase]
  key_file:
    path: /tmp/key
    variable_name: SONARSOURCE_SIGN_KEY
  add_repos_script:
    - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    - helm repo add bitnami-pre2022 https://raw.githubusercontent.com/bitnami/charts/archive-full-index/bitnami
    - helm repo update

push_to_repox: &PUSH_TO_REPOX_TASK_TEMPLATE
  <<: *EXCEPT_ON_PR_OR_CRON
  timeout_in: 15m
  eks_container:
    <<: *STD_CONTAINER_TEMPLATE
    cpu: 1
    memory: 1Gb
  <<: *CLONE_SCRIPT_TEMPLATE
  environment_cache:
    folder: ${CIRRUS_WORKING_DIR}/*.tgz*
    fingerprint_script: echo $CIRRUS_BUILD_ID
  env:
    ARTIFACTORY_URL: VAULT[development/kv/data/repox data.url]
    ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
