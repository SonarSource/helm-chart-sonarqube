name: Build
on:
  push:
  pull_request:
  merge_group:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'  # Nightly builds

jobs:
  chart-fixture-test:
    concurrency:
      group: ${{ github.workflow }}-chart-fixture-test-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: ${{ github.ref_name != github.event.repository.default_branch }}
    runs-on: ubuntu-24.04-large
    name: Chart Fixture Test
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - uses: jdx/mise-action@bfb9fa0b029db830a8c570757cee683df207a6c5 # v2.4.0
        with:
          version: 2025.7.12
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.7.0
      - uses: actions/setup-python@v5.3.0
        with:
          python-version: '3.x'
          check-latest: true
      - name: Install additional tools
        run: |
          # Install yamllint and yamale
          pip install yamllint==1.37.1 yamale==6.0.0
      - name: Build chart dependencies
        run: |
          ./.cirrus/build_chart_dependencies.sh charts/sonarqube
          ./.cirrus/build_chart_dependencies.sh charts/sonarqube-dce
      - name: Generate Helm fixtures
        run: |
          ./.cirrus/generate_helm_fixtures.sh
          git diff --exit-code

  chart-schema-test:
    concurrency:
      group: ${{ github.workflow }}-chart-schema-test-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: ${{ github.ref_name != github.event.repository.default_branch }}
    runs-on: ubuntu-24.04-large
    name: Chart Schema Test
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - uses: jdx/mise-action@bfb9fa0b029db830a8c570757cee683df207a6c5 # v2.4.0
        with:
          version: 2025.7.12
      - name: Install additional tools
        run: |
          pip install yamllint==1.37.1 yamale==6.0.0
      - name: Build chart dependencies
        run: |
          ./.cirrus/build_chart_dependencies.sh charts/sonarqube
          ./.cirrus/build_chart_dependencies.sh charts/sonarqube-dce
      - name: Run schema tests
        run: ./.cirrus/schema_test.sh

  sonarqube-static-compatibility-test:
    concurrency:
      group: ${{ github.workflow }}-sonarqube-static-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: ${{ github.ref_name != github.event.repository.default_branch }}
    runs-on: ubuntu-24.04-large
    name: SonarQube Static Compatibility Test
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - uses: jdx/mise-action@bfb9fa0b029db830a8c570757cee683df207a6c5 # v2.4.0
        with:
          version: 2025.7.12
      - name: Build chart dependencies
        run: ./.cirrus/build_chart_dependencies.sh charts/sonarqube
      - name: Run unit helm compatibility test
        run: ./.cirrus/unit_helm_compatibility_test.sh sonarqube

  sonarqube-dce-static-compatibility-test:
    concurrency:
      group: ${{ github.workflow }}-sonarqube-dce-static-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: ${{ github.ref_name != github.event.repository.default_branch }}
    runs-on: ubuntu-24.04-large
    name: SonarQube DCE Static Compatibility Test
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - uses: jdx/mise-action@bfb9fa0b029db830a8c570757cee683df207a6c5 # v2.4.0
        with:
          version: 2025.7.12
      - name: Build chart dependencies
        run: ./.cirrus/build_chart_dependencies.sh charts/sonarqube-dce
      - name: Run unit helm compatibility test
        run: ./.cirrus/unit_helm_compatibility_test.sh sonarqube-dce

  sonarqube-openshift-test:
    needs: [sonarqube-static-compatibility-test]
    concurrency:
      group: ${{ github.workflow }}-sonarqube-openshift-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: ${{ github.ref_name != github.event.repository.default_branch }}
    runs-on: sonar-runner
    name: SonarQube OpenShift Test
    permissions:
      id-token: write
      contents: read
    env:
      VERIFYING_CHART: sonarqube
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - uses: jdx/mise-action@bfb9fa0b029db830a8c570757cee683df207a6c5 # v2.4.0
        with:
          version: 2025.7.12
      - id: secrets
        uses: SonarSource/vault-action-wrapper@3.0.2
        with:
          secrets: |
            development/kv/data/docker/sonardockerrw username | DOCKER_USERNAME;
            development/kv/data/docker/sonardockerrw access_token_rwd | DOCKER_PASSWORD;
            development/team/sonarqube/kv/data/rosa-openshift url | ROSA_OPENSHIFT_URL;
            development/team/sonarqube/kv/data/rosa-dev username | ROSA_OPENSHIFT_USER;
            development/team/sonarqube/kv/data/rosa-dev password | ROSA_OPENSHIFT_PASSWORD;
      - name: Install chart-verifier
        run: |
          curl -LO https://github.com/redhat-certification/chart-verifier/releases/download/1.13.11/chart-verifier-1.13.11.tgz
          echo "ad221d0e030ce820c8ecfadaa10a6d5183adbe00fcd8dee627c3fdd7e5bf37e7  chart-verifier-1.13.11.tgz" | sha256sum -c
          tar -xf chart-verifier-1.13.11.tgz
          sudo mv chart-verifier /usr/local/bin/chart-verifier
      - name: Install OpenShift CLI
        run: |
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/ocp/4.18.9/openshift-client-linux.tar.gz
          echo "1e2d73c870756e3940dcb6c1112c7aa7f702a89cfdb992d11079ac852b4ea05c  openshift-client-linux.tar.gz" | sha256sum -c
          mkdir -p /tmp/openshift
          tar -xf openshift-client-linux.tar.gz -C /tmp/openshift
          sudo mv /tmp/openshift/oc /usr/local/bin/oc
          rm -rf /tmp/openshift openshift-client-linux.tar.gz
      - name: Authenticate to OpenShift
        env:
          ROSA_OPENSHIFT_URL: ${{ fromJSON(steps.secrets.outputs.vault).ROSA_OPENSHIFT_URL }}
          ROSA_OPENSHIFT_USER: ${{ fromJSON(steps.secrets.outputs.vault).ROSA_OPENSHIFT_USER }}
          ROSA_OPENSHIFT_PASSWORD: ${{ fromJSON(steps.secrets.outputs.vault).ROSA_OPENSHIFT_PASSWORD }}
        run: ./.cirrus/openshift_auth.sh
      - name: Setup OpenShift project
        env:
          DOCKER_USERNAME: ${{ fromJSON(steps.secrets.outputs.vault).DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ fromJSON(steps.secrets.outputs.vault).DOCKER_PASSWORD }}
        run: |
          oc new-project "${VERIFYING_CHART}" --display-name="Test Project" --description="This is a test project for testing ${VERIFYING_CHART} from GitHub Actions" || oc project "${VERIFYING_CHART}"
          kubectl create secret docker-registry pullsecret --namespace "${VERIFYING_CHART}" --docker-username=${DOCKER_USERNAME} --docker-password=${DOCKER_PASSWORD} --dry-run=client -o yaml | kubectl apply -f -
          ./.cirrus/build_chart_dependencies.sh charts/"${VERIFYING_CHART}"
          chart-verifier version
      - name: Run chart verification
        run: |
          mkdir -p "$(pwd)/report-${VERIFYING_CHART}"
          chart-verifier verify -x images-are-certified charts/"${VERIFYING_CHART}" --helm-install-timeout 20m -F charts/"${VERIFYING_CHART}"/openshift-verifier/values.yaml -n "${VERIFYING_CHART}" --openshift-version 4.16 > "$(pwd)/report-${VERIFYING_CHART}/report.yaml"
      - name: Upload verification report
        if: always() && ! cancelled()
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: sonarqube-openshift-report
          path: report-*/report.yaml
      - name: Check violations
        run: cat "report-${VERIFYING_CHART}/report.yaml" | ./.cirrus/verify_openshift.sh
      - name: Cleanup
        if: always()
        run: oc delete project "${VERIFYING_CHART}" || true

  sonarqube-dce-openshift-test:
    needs: [sonarqube-dce-static-compatibility-test]
    concurrency:
      group: ${{ github.workflow }}-sonarqube-dce-openshift-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: ${{ github.ref_name != github.event.repository.default_branch }}
    runs-on: sonar-runner
    name: SonarQube DCE OpenShift Test
    permissions:
      id-token: write
      contents: read
    env:
      VERIFYING_CHART: sonarqube-dce
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - uses: jdx/mise-action@bfb9fa0b029db830a8c570757cee683df207a6c5 # v2.4.0
        with:
          version: 2025.7.12
      - id: secrets
        uses: SonarSource/vault-action-wrapper@3.0.2
        with:
          secrets: |
            development/kv/data/docker/sonardockerrw username | DOCKER_USERNAME;
            development/kv/data/docker/sonardockerrw access_token_rwd | DOCKER_PASSWORD;
            development/team/sonarqube/kv/data/rosa-openshift url | ROSA_OPENSHIFT_URL;
            development/team/sonarqube/kv/data/rosa-dev username | ROSA_OPENSHIFT_USER;
            development/team/sonarqube/kv/data/rosa-dev password | ROSA_OPENSHIFT_PASSWORD;
      - name: Install chart-verifier
        run: |
          curl -LO https://github.com/redhat-certification/chart-verifier/releases/download/1.13.11/chart-verifier-1.13.11.tgz
          echo "ad221d0e030ce820c8ecfadaa10a6d5183adbe00fcd8dee627c3fdd7e5bf37e7  chart-verifier-1.13.11.tgz" | sha256sum -c
          tar -xf chart-verifier-1.13.11.tgz
          sudo mv chart-verifier /usr/local/bin/chart-verifier
      - name: Install OpenShift CLI
        run: |
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/ocp/4.18.9/openshift-client-linux.tar.gz
          echo "1e2d73c870756e3940dcb6c1112c7aa7f702a89cfdb992d11079ac852b4ea05c  openshift-client-linux.tar.gz" | sha256sum -c
          mkdir -p /tmp/openshift
          tar -xf openshift-client-linux.tar.gz -C /tmp/openshift
          sudo mv /tmp/openshift/oc /usr/local/bin/oc
          rm -rf /tmp/openshift openshift-client-linux.tar.gz
      - name: Authenticate to OpenShift
        env:
          ROSA_OPENSHIFT_URL: ${{ fromJSON(steps.secrets.outputs.vault).ROSA_OPENSHIFT_URL }}
          ROSA_OPENSHIFT_USER: ${{ fromJSON(steps.secrets.outputs.vault).ROSA_OPENSHIFT_USER }}
          ROSA_OPENSHIFT_PASSWORD: ${{ fromJSON(steps.secrets.outputs.vault).ROSA_OPENSHIFT_PASSWORD }}
        run: ./.cirrus/openshift_auth.sh
      - name: Setup OpenShift project
        env:
          DOCKER_USERNAME: ${{ fromJSON(steps.secrets.outputs.vault).DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ fromJSON(steps.secrets.outputs.vault).DOCKER_PASSWORD }}
        run: |
          oc new-project "${VERIFYING_CHART}" --display-name="Test Project" --description="This is a test project for testing ${VERIFYING_CHART} from GitHub Actions" || oc project "${VERIFYING_CHART}"
          kubectl create secret docker-registry pullsecret --namespace "${VERIFYING_CHART}" --docker-username=${DOCKER_USERNAME} --docker-password=${DOCKER_PASSWORD} --dry-run=client -o yaml | kubectl apply -f -
          ./.cirrus/build_chart_dependencies.sh charts/"${VERIFYING_CHART}"
          chart-verifier version
      - name: Run chart verification
        run: |
          mkdir -p "$(pwd)/report-${VERIFYING_CHART}"
          chart-verifier verify -x images-are-certified charts/"${VERIFYING_CHART}" --helm-install-timeout 20m -F charts/"${VERIFYING_CHART}"/openshift-verifier/values.yaml -n "${VERIFYING_CHART}" --openshift-version 4.16 > "$(pwd)/report-${VERIFYING_CHART}/report.yaml"
      - name: Upload verification report
        if: always() && ! cancelled()
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: sonarqube-dce-openshift-report
          path: report-*/report.yaml
      - name: Check violations
        run: cat "report-${VERIFYING_CHART}/report.yaml" | ./.cirrus/verify_openshift.sh
      - name: Cleanup
        if: always()
        run: oc delete project "${VERIFYING_CHART}" || true

  sonarqube-kind-test:
    needs: [sonarqube-static-compatibility-test]
    concurrency:
      group: ${{ github.workflow }}-sonarqube-kind-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: ${{ github.ref_name != github.event.repository.default_branch }}
    runs-on: ubuntu-24.04-large
    name: SonarQube Kind Test
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - uses: jdx/mise-action@bfb9fa0b029db830a8c570757cee683df207a6c5 # v2.4.0
        with:
          version: 2025.7.12
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.7.0
      - name: Create kind cluster
        uses: helm/kind-action@v1.12.0
      - name: Setup Kind cluster
        run: |
          # ./.cirrus/setup_kind_vm.sh
          kubectl cluster-info --context kind-chart-testing
          kubectl get nodes
          kubectl describe node chart-testing-control-plane
      - name: Setup Istio
        run: |
          helm repo add istio https://istio-release.storage.googleapis.com/charts
          kubectl create namespace istio-system --dry-run=client -o yaml | kubectl apply -f -
          helm upgrade -i istio-base istio/base -n istio-system --set defaultRevision=default --set global.proxy.holdApplicationUntilProxyStarts=true --wait
          helm upgrade -i istiod istio/istiod --set global.proxy.holdApplicationUntilProxyStarts=true --set resources.requests.cpu=100m -n istio-system --wait
          kubectl create namespace test --dry-run=client -o yaml | kubectl apply -f -
          kubectl label namespace test istio-injection=enabled
      - id: secrets
        uses: SonarSource/vault-action-wrapper@3.0.2
        with:
          secrets: |
            development/kv/data/docker/sonardockerrw username | DOCKER_USERNAME;
            development/kv/data/docker/sonardockerrw access_token_rwd | DOCKER_PASSWORD;
      - name: Setup docker registry secret
        env:
          DOCKER_USERNAME: ${{ fromJSON(steps.secrets.outputs.vault).DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ fromJSON(steps.secrets.outputs.vault).DOCKER_PASSWORD }}
        run: kubectl create secret docker-registry pullsecret --namespace test --docker-username=${DOCKER_USERNAME} --docker-password=${DOCKER_PASSWORD} --dry-run=client -o yaml | kubectl apply -f -
      - name: Install ArtifactHub CLI
        run: |
          curl -LO https://github.com/artifacthub/hub/releases/download/v1.21.0/ah_1.21.0_linux_amd64.tar.gz
          echo "48d6b87b60baf4ee8fd5efbfec3bf5fb3ca783ab3f1dab625e64332b95df2a84  ah_1.21.0_linux_amd64.tar.gz" | sha256sum -c
          mkdir -p /tmp/artifacthub
          tar -xf ah_1.21.0_linux_amd64.tar.gz -C /tmp/artifacthub
          sudo mv /tmp/artifacthub/ah /usr/local/bin/ah
          rm -rf /tmp/artifacthub ah_1.21.0_linux_amd64.tar.gz
      - name: Run ArtifactHub lint
        run: ah lint
      - name: Run chart testing
        run: |
          ct lint --config ct-sonarqube-test.yaml
          ct install --namespace test --config ct-sonarqube-test.yaml --debug

  sonarqube-dce-kind-test:
    needs: [sonarqube-dce-static-compatibility-test]
    concurrency:
      group: ${{ github.workflow }}-sonarqube-dce-kind-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: ${{ github.ref_name != github.event.repository.default_branch }}
    runs-on: ubuntu-24.04-large
    name: SonarQube DCE Kind Test
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - uses: jdx/mise-action@bfb9fa0b029db830a8c570757cee683df207a6c5 # v2.4.0
        with:
          version: 2025.7.12
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.7.0
      - name: Create kind cluster
        uses: helm/kind-action@v1.12.0
      - name: Setup Kind cluster
        run: |
          # ./.cirrus/setup_kind_vm.sh
          kubectl cluster-info --context kind-chart-testing
          kubectl get nodes
          kubectl describe node chart-testing-control-plane
      - name: Setup Istio
        run: |
          helm repo add istio https://istio-release.storage.googleapis.com/charts
          kubectl create namespace istio-system --dry-run=client -o yaml | kubectl apply -f -
          helm upgrade -i istio-base istio/base -n istio-system --set defaultRevision=default --set global.proxy.holdApplicationUntilProxyStarts=true --wait
          helm upgrade -i istiod istio/istiod --set global.proxy.holdApplicationUntilProxyStarts=true --set resources.requests.cpu=100m -n istio-system --wait
          kubectl create namespace test --dry-run=client -o yaml | kubectl apply -f -
          kubectl label namespace test istio-injection=enabled
      - id: dcesecrets
        uses: SonarSource/vault-action-wrapper@3.0.2
        with:
          secrets: |
            development/kv/data/docker/sonardockerrw username | DOCKER_USERNAME;
            development/kv/data/docker/sonardockerrw access_token_rwd | DOCKER_PASSWORD;
      - name: Setup docker registry secret
        env:
          DOCKER_USERNAME: ${{ fromJSON(steps.dcesecrets.outputs.vault).DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ fromJSON(steps.dcesecrets.outputs.vault).DOCKER_PASSWORD }}
        run: kubectl create secret docker-registry pullsecret --namespace test --docker-username=${DOCKER_USERNAME} --docker-password=${DOCKER_PASSWORD} --dry-run=client -o yaml | kubectl apply -f -
      - name: Install ArtifactHub CLI
        run: |
          curl -LO https://github.com/artifacthub/hub/releases/download/v1.21.0/ah_1.21.0_linux_amd64.tar.gz
          echo "48d6b87b60baf4ee8fd5efbfec3bf5fb3ca783ab3f1dab625e64332b95df2a84  ah_1.21.0_linux_amd64.tar.gz" | sha256sum -c
          mkdir -p /tmp/artifacthub
          tar -xf ah_1.21.0_linux_amd64.tar.gz -C /tmp/artifacthub
          sudo mv /tmp/artifacthub/ah /usr/local/bin/ah
          rm -rf /tmp/artifacthub ah_1.21.0_linux_amd64.tar.gz
      - name: Run ArtifactHub lint
        run: ah lint
      - name: Run chart testing
        run: |
          ct lint --config ct-sonarqube-dce-test.yaml
          ct install --namespace test --config ct-sonarqube-dce-test.yaml --debug

  sonarqube-packaging:
    needs: [sonarqube-kind-test, sonarqube-openshift-test]
    concurrency:
      group: ${{ github.workflow }}-sonarqube-packaging-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: ${{ github.ref_name != github.event.repository.default_branch }}
    runs-on: ubuntu-24.04-large
    name: SonarQube Packaging
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - uses: jdx/mise-action@bfb9fa0b029db830a8c570757cee683df207a6c5 # v2.4.0
        with:
          version: 2025.7.12
      - uses: SonarSource/ci-github-actions/get-build-number@v1
      - id: secrets
        uses: SonarSource/vault-action-wrapper@3.0.2
        with:
          secrets: |
            development/github/token/SonarSource-helm-chart-sonarqube-releases token | GITHUB_TOKEN;
            development/kv/data/sign key | SONARSOURCE_SIGN_KEY;
            development/kv/data/sign key_id | SONARSOURCE_SIGN_KEY_ID;
            development/kv/data/sign passphrase | SONARSOURCE_SIGN_KEY_PASSPHRASE;
      - name: Setup signing key
        env:
          SONARSOURCE_SIGN_KEY: ${{ fromJSON(steps.secrets.outputs.vault).SONARSOURCE_SIGN_KEY }}
        run: echo "$SONARSOURCE_SIGN_KEY" > /tmp/key
      - name: Add Helm repositories
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo add bitnami-pre2022 https://raw.githubusercontent.com/bitnami/charts/archive-full-index/bitnami
          helm repo update
      - name: Package and sign SonarQube chart
        env:
          GITHUB_TOKEN: ${{ fromJSON(steps.secrets.outputs.vault).GITHUB_TOKEN }}
          SONARSOURCE_SIGN_KEY_ID: ${{ fromJSON(steps.secrets.outputs.vault).SONARSOURCE_SIGN_KEY_ID }}
          SONARSOURCE_SIGN_KEY_PASSPHRASE: ${{ fromJSON(steps.secrets.outputs.vault).SONARSOURCE_SIGN_KEY_PASSPHRASE }}
        run: |
          source cirrus-env BUILD
          ./.cirrus/package.sh sonarqube
          ./.cirrus/sign_chart.sh sonarqube
      - name: Upload SonarQube chart artifact
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: sonarqube-chart-${{ github.run_id }}
          path: "*.tgz*"

  sonarqube-dce-packaging:
    needs: [sonarqube-dce-kind-test, sonarqube-dce-openshift-test]
    concurrency:
      group: ${{ github.workflow }}-sonarqube-dce-packaging-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: ${{ github.ref_name != github.event.repository.default_branch }}
    runs-on: ubuntu-24.04-large
    name: SonarQube DCE Packaging
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - uses: jdx/mise-action@bfb9fa0b029db830a8c570757cee683df207a6c5 # v2.4.0
        with:
          version: 2025.7.12
      - uses: SonarSource/ci-github-actions/get-build-number@v1
      - id: secrets
        uses: SonarSource/vault-action-wrapper@3.0.2
        with:
          secrets: |
            development/github/token/SonarSource-helm-chart-sonarqube-releases token | GITHUB_TOKEN;
            development/kv/data/sign key | SONARSOURCE_SIGN_KEY;
            development/kv/data/sign key_id | SONARSOURCE_SIGN_KEY_ID;
            development/kv/data/sign passphrase | SONARSOURCE_SIGN_KEY_PASSPHRASE;
      - name: Setup signing key
        env:
          SONARSOURCE_SIGN_KEY: ${{ fromJSON(steps.secrets.outputs.vault).SONARSOURCE_SIGN_KEY }}
        run: echo "$SONARSOURCE_SIGN_KEY" > /tmp/key
      - name: Add Helm repositories
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo add bitnami-pre2022 https://raw.githubusercontent.com/bitnami/charts/archive-full-index/bitnami
          helm repo update
      - name: Package and sign SonarQube DCE chart
        env:
          GITHUB_TOKEN: ${{ fromJSON(steps.secrets.outputs.vault).GITHUB_TOKEN }}
          SONARSOURCE_SIGN_KEY_ID: ${{ fromJSON(steps.secrets.outputs.vault).SONARSOURCE_SIGN_KEY_ID }}
          SONARSOURCE_SIGN_KEY_PASSPHRASE: ${{ fromJSON(steps.secrets.outputs.vault).SONARSOURCE_SIGN_KEY_PASSPHRASE }}
        run: |
          source cirrus-env BUILD
          ./.cirrus/package.sh sonarqube-dce
          ./.cirrus/sign_chart.sh sonarqube-dce
      - name: Upload SonarQube DCE chart artifact
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: sonarqube-dce-chart-${{ github.run_id }}
          path: "*.tgz*"

  sonarqube-push-to-repox:
    needs: [sonarqube-packaging]
    concurrency:
      group: ${{ github.workflow }}-sonarqube-repox-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: ${{ github.ref_name != github.event.repository.default_branch }}
    runs-on: ubuntu-24.04-large
    name: SonarQube Push to Repox
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - uses: jdx/mise-action@bfb9fa0b029db830a8c570757cee683df207a6c5 # v2.4.0
        with:
          cache_save: false
          version: 2025.7.12
      - uses: SonarSource/ci-github-actions/get-build-number@v1
      - name: Download SonarQube chart artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: sonarqube-chart-${{ github.run_id }}
      - id: secrets
        uses: SonarSource/vault-action-wrapper@3.0.2
        with:
          secrets: |
            development/kv/data/repox url | ARTIFACTORY_URL;
            development/artifactory/token/SonarSource-helm-chart-sonarqube-qa-deployer access_token | ARTIFACTORY_ACCESS_TOKEN;
      - name: Upload to Repox
        env:
          ARTIFACTORY_URL: ${{ fromJSON(steps.secrets.outputs.vault).ARTIFACTORY_URL }}
          ARTIFACTORY_ACCESS_TOKEN: ${{ fromJSON(steps.secrets.outputs.vault).ARTIFACTORY_ACCESS_TOKEN }}
        run: |
          source cirrus-env ""
          ./.cirrus/upload_chart.sh sonarqube

  sonarqube-dce-push-to-repox:
    needs: [sonarqube-dce-packaging]
    concurrency:
      group: ${{ github.workflow }}-sonarqube-dce-repox-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: ${{ github.ref_name != github.event.repository.default_branch }}
    runs-on: ubuntu-24.04-large
    name: SonarQube DCE Push to Repox
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - uses: jdx/mise-action@bfb9fa0b029db830a8c570757cee683df207a6c5 # v2.4.0
        with:
          cache_save: false
          version: 2025.7.12
      - uses: SonarSource/ci-github-actions/get-build-number@v1
      - name: Download SonarQube DCE chart artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: sonarqube-dce-chart-${{ github.run_id }}
      - id: secrets
        uses: SonarSource/vault-action-wrapper@3.0.2
        with:
          secrets: |
            development/kv/data/repox url | ARTIFACTORY_URL;
            development/artifactory/token/SonarSource-helm-chart-sonarqube-qa-deployer access_token | ARTIFACTORY_ACCESS_TOKEN;
      - name: Upload to Repox
        env:
          ARTIFACTORY_URL: ${{ fromJSON(steps.secrets.outputs.vault).ARTIFACTORY_URL }}
          ARTIFACTORY_ACCESS_TOKEN: ${{ fromJSON(steps.secrets.outputs.vault).ARTIFACTORY_ACCESS_TOKEN }}
        run: |
          source cirrus-env ""
          ./.cirrus/upload_chart.sh sonarqube-dce

  trigger-release:
    needs: [sonarqube-packaging, sonarqube-dce-packaging, sonarqube-push-to-repox, sonarqube-dce-push-to-repox]
    concurrency:
      group: ${{ github.workflow }}-trigger-release-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: ${{ github.ref_name != github.event.repository.default_branch }}
    runs-on: ubuntu-24.04-large
    name: Trigger Release
    permissions:
      id-token: write
      contents: write
    if: ${{ github.event_name == 'push' && github.ref_type == 'tag' }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - uses: jdx/mise-action@bfb9fa0b029db830a8c570757cee683df207a6c5 # v2.4.0
        with:
          cache_save: false
          version: 2025.7.12
      - uses: SonarSource/ci-github-actions/get-build-number@v1
      - name: Download SonarQube chart artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: sonarqube-chart-${{ github.run_id }}
      - name: Download SonarQube DCE chart artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: sonarqube-dce-chart-${{ github.run_id }}
      - id: secrets
        uses: SonarSource/vault-action-wrapper@3.0.2
        with:
          secrets: |
            development/github/token/SonarSource-helm-chart-sonarqube-releases token | GITHUB_TOKEN;
            development/kv/data/slack token | SLACK_TOKEN;
      - name: Trigger release workflow
        env:
          GITHUB_TOKEN: ${{ fromJSON(steps.secrets.outputs.vault).GITHUB_TOKEN }}
        run: |
          source cirrus-env RELEASE
          CHARTS=$(find $GITHUB_WORKSPACE -maxdepth 1 -name "*.tgz*" -type f -exec basename "{}" ";")
          [[ "x$CHARTS" == "x" ]] && exit 0
          gh workflow run release.yml -f version=${{ github.ref_name }} -f buildNumber=$BUILD_NUMBER
      - name: Slack notification on failure
        if: failure()
        env:
          SLACK_TOKEN: ${{ fromJSON(steps.secrets.outputs.vault).SLACK_TOKEN }}
        run: ./.cirrus/slack-notification.sh
