on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version of the release"
        required: true
      buildNumber:
        description: "Build number of the release"
        required: true

name: Release

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v1
      - name: JFrog config
        run: jfrog rt config repox --url https://repox.jfrog.io/artifactory/ --apikey $ARTIFACTORY_API_KEY --basic-auth-only
        env:
          ARTIFACTORY_API_KEY: ${{ secrets.ARTIFACTORY_API_KEY }}
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch history
        run: git fetch --prune --unshallow
      - name: Promote
        run: jfrog rt build-promote --status released "${{ github.event.repository.name }}" "${{ github.event.inputs.buildNumber }}" sonarsource-helm-releases
      - name: Create local repository directory
        id: local_repo
        run: echo ::set-output name=dir::"$(mktemp -d repo.XXXXXXXX)"
      - name: Download artifacts
        shell: bash
        working-directory: ${{ steps.local_repo.outputs.dir }}
        run: jfrog rt download --fail-no-op --build "${{ github.event.repository.name }}/${{ github.event.inputs.buildNumber }}" sonarsource-helm/
      - name: Download checksums
        shell: bash
        working-directory: ${{ steps.local_repo.outputs.dir }}
        run: find . -type f -not \( -name "*.asc" -or -name "*.md5" -or -name "*.sha1" -or -name "*.sha256" \) -exec jfrog rt curl "sonarsource-helm/{{}}.{md5,sha1,sha256}" --output "#1.#2" \;
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: ${{ steps.local_repo.outputs.dir }}/*
          tag: ${{ github.event.inputs.version }}
          overwrite: true
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
      - name: Release to GitHub
        uses: ./.github/actions/helm-index
        env:
          CR_TOKEN: "${{ secrets.RELEASE_GITHUB_TOKEN }}"
        with:
          repository-name: "${{ github.event.repository.name }}"
          package-path: ${{ steps.local_repo.outputs.dir }}
          release-name: "${{ github.event.inputs.version}}"
      - name: Notify failures on Slack
        if: failure()
        uses: Ilshidur/action-slack@2.0.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_SQ_DEVOPS_WEBHOOK }}
        with:
          args: "Helm Chart Release failed, see the logs at https://github.com/SonarSource/helm-chart-sonarqube/actions"
