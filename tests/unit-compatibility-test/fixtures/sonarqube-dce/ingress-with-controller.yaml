---
# Source: sonarqube-dce/templates/pod-disruption-budget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ingress-with-controller.yaml-sonarqube-dce-search
  labels:
    app: sonarqube-dce
    chart: sonarqube-dce-2025.2.0
    release: ingress-with-controller.yaml
    heritage: Helm
spec:
  minAvailable: 2

  selector:
    matchLabels:
      sonarqube.datacenter/type: "search"
---
# Source: sonarqube-dce/templates/pod-disruption-budget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ingress-with-controller.yaml-sonarqube-dce-app
  labels:
    app: sonarqube-dce
    chart: sonarqube-dce-2025.2.0
    release: ingress-with-controller.yaml
    heritage: Helm
spec:
  minAvailable: 1

  selector:
    matchLabels:
      sonarqube.datacenter/type: "app"
---
# Source: sonarqube-dce/charts/ingress-nginx/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.12.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/version: "1.12.1"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: ingress-with-controller.yaml-ingress-nginx
  namespace: default
automountServiceAccountToken: true
---
# Source: sonarqube-dce/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ingress-with-controller.yaml-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.0
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/managed-by: Helm
  namespace: default
type: Opaque
data:
  postgresql-postgres-password: "dG90bw=="
  postgresql-password: "c29uYXJQYXNz"
---
# Source: sonarqube-dce/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ingress-with-controller.yaml-sonarqube-dce-monitoring-passcode
  labels:
    app: sonarqube-dce
    chart: sonarqube-dce-2025.2.0
    release: ingress-with-controller.yaml
    heritage: Helm
type: Opaque
data:
  SONAR_WEB_SYSTEMPASSCODE: "dGVzdA=="
---
# Source: sonarqube-dce/templates/secret.yaml
---
apiVersion: v1
kind: Secret
metadata:
  name: ingress-with-controller.yaml-sonarqube-dce-jwt
  labels:
    app: sonarqube-dce
    chart: sonarqube-dce-2025.2.0
    release: ingress-with-controller.yaml
    heritage: Helm
type: Opaque
data:
  SONAR_AUTH_JWTBASE64HS256SECRET: ""
---
# Source: sonarqube-dce/templates/secret.yaml
---
apiVersion: v1
kind: Secret
metadata:
  name: ingress-with-controller.yaml-sonarqube-dce-http-proxies
  labels:
    app: sonarqube-dce
    chart: sonarqube-dce-2025.2.0
    release: ingress-with-controller.yaml
    heritage: Helm
type: Opaque
stringData:
  PLUGINS-HTTP-PROXY: ""
  PLUGINS-HTTPS-PROXY: ""
  PLUGINS-NO-PROXY: ""
  PROMETHEUS-EXPORTER-HTTP-PROXY: ""
  PROMETHEUS-EXPORTER-HTTPS-PROXY: ""
  PROMETHEUS-EXPORTER-NO-PROXY: ""
---
# Source: sonarqube-dce/charts/ingress-nginx/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.12.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/version: "1.12.1"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: ingress-with-controller.yaml-ingress-nginx-controller
  namespace: default
data:
---
# Source: sonarqube-dce/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-with-controller.yaml-sonarqube-dce-app-config
  labels:
    app: sonarqube-dce
    chart: sonarqube-dce-2025.2.0
    release: ingress-with-controller.yaml
    heritage: Helm
data:
  sonar.properties: |
---
# Source: sonarqube-dce/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-with-controller.yaml-sonarqube-dce-search-config
  labels:
    app: sonarqube-dce
    chart: sonarqube-dce-2025.2.0
    release: ingress-with-controller.yaml
    heritage: Helm
data:
  sonar.properties: |
---
# Source: sonarqube-dce/templates/init-fs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-with-controller.yaml-sonarqube-dce-init-fs
  labels:
    app: sonarqube-dce
    chart: sonarqube-dce-2025.2.0
    release: ingress-with-controller.yaml
    heritage: Helm
data:
  init_fs.sh: |-
    chown -R 1000:0 /opt/sonarqube/data
    chown -R 1000:0 /opt/sonarqube/temp
    chown -R 1000:0 /opt/sonarqube/logs
---
# Source: sonarqube-dce/templates/init-sysctl.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-with-controller.yaml-sonarqube-dce-init-sysctl
  labels:
    app: sonarqube-dce
    chart: sonarqube-dce-2025.2.0
    release: ingress-with-controller.yaml
    heritage: Helm
data:
  init_sysctl.sh: |-
    set -o errexit
    set -o xtrace
    vmMaxMapCount=524288
    if [[ "$(sysctl -n vm.max_map_count)" -lt $vmMaxMapCount ]]; then
      sysctl -w vm.max_map_count=$vmMaxMapCount
      if [[ "$(sysctl -n vm.max_map_count)" -lt $vmMaxMapCount ]]; then
        echo "Failed to set initSysctl.vmMaxMapCount"; exit 1
      fi
    fi
    fsFileMax=131072
    if [[ "$(sysctl -n fs.file-max)" -lt $fsFileMax ]]; then
      sysctl -w fs.file-max=$fsFileMax
      if [[ "$(sysctl -n fs.file-max)" -lt $fsFileMax ]]; then
        echo "Failed to set initSysctl.fsFileMax"; exit 1
      fi
    fi
    nofile=131072
    if [[ "$(ulimit -n)" != "unlimited" ]]; then
      if [[ "$(ulimit -n)" -lt $nofile ]]; then
        ulimit -n $nofile
        if [[ "$(ulimit -n)" -lt $nofile ]]; then
          echo "Failed to set initSysctl.nofile"; exit 1
        fi
      fi
    fi
    nproc=8192
    if [[ "$(ulimit -u)" != "unlimited" ]]; then
      if [[ "$(ulimit -u)" -lt $nproc ]]; then
        ulimit -u $nproc
        if [[ "$(ulimit -u)" -lt $nproc ]]; then
          echo "Failed to set initSysctl.nproc"; exit 1
        fi
      fi
    fi
---
# Source: sonarqube-dce/templates/install-plugins.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-with-controller.yaml-sonarqube-dce-install-plugins
  labels:
    app: sonarqube-dce
    chart: sonarqube-dce-2025.2.0
    release: ingress-with-controller.yaml
    heritage: Helm
data:
  install_plugins.sh: |-
---
# Source: sonarqube-dce/templates/jdbc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-with-controller.yaml-sonarqube-dce-jdbc-config
  labels:
    app: sonarqube-dce
    chart: sonarqube-dce-2025.2.0
    release: ingress-with-controller.yaml
    heritage: Helm
data:
  SONAR_JDBC_USERNAME: "sonarUser"
  SONAR_JDBC_URL: "jdbc:postgresql://ingress-with-controller.yaml-postgresql:5432/sonarDB"
---
# Source: sonarqube-dce/charts/ingress-nginx/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.12.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/version: "1.12.1"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
  name: ingress-with-controller.yaml-ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
      - namespaces
    verbs:
      - list
      - watch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - list
      - watch
      - get
---
# Source: sonarqube-dce/charts/ingress-nginx/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.12.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/version: "1.12.1"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
  name: ingress-with-controller.yaml-ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ingress-with-controller.yaml-ingress-nginx
subjects:
  - kind: ServiceAccount
    name: ingress-with-controller.yaml-ingress-nginx
    namespace: default
---
# Source: sonarqube-dce/charts/ingress-nginx/templates/controller-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.12.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/version: "1.12.1"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: ingress-with-controller.yaml-ingress-nginx
  namespace: default
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  # Omit Ingress status permissions if `--update-status` is disabled.
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    resourceNames:
      - ingress-with-controller.yaml-ingress-nginx-leader
    verbs:
      - get
      - update
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - list
      - watch
      - get
---
# Source: sonarqube-dce/charts/ingress-nginx/templates/controller-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.12.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/version: "1.12.1"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: ingress-with-controller.yaml-ingress-nginx
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ingress-with-controller.yaml-ingress-nginx
subjects:
  - kind: ServiceAccount
    name: ingress-with-controller.yaml-ingress-nginx
    namespace: default
---
# Source: sonarqube-dce/charts/ingress-nginx/templates/controller-service-webhook.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.12.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/version: "1.12.1"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: ingress-with-controller.yaml-ingress-nginx-controller-admission
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: https-webhook
      port: 443
      targetPort: webhook
      appProtocol: https
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/component: controller
---
# Source: sonarqube-dce/charts/ingress-nginx/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    helm.sh/chart: ingress-nginx-4.12.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/version: "1.12.1"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: ingress-with-controller.yaml-ingress-nginx-controller
  namespace: default
spec:
  type: LoadBalancer
  ipFamilyPolicy: SingleStack
  ipFamilies: 
    - IPv4
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      appProtocol: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
      appProtocol: https
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/component: controller
---
# Source: sonarqube-dce/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: ingress-with-controller.yaml-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.0
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: ingress-with-controller.yaml
---
# Source: sonarqube-dce/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: ingress-with-controller.yaml-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.0
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: ingress-with-controller.yaml
    role: primary
---
# Source: sonarqube-dce/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ingress-with-controller.yaml-sonarqube-dce
  labels:
    app: sonarqube-dce
    chart: sonarqube-dce-2025.2.0
    release: ingress-with-controller.yaml
    heritage: Helm

spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: sonarqube-dce
    release: ingress-with-controller.yaml
---
# Source: sonarqube-dce/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ingress-with-controller.yaml-sonarqube-dce-headless
  labels:
    app: sonarqube-dce
    chart: sonarqube-dce-2025.2.0
    release: ingress-with-controller.yaml
    heritage: Helm

spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 9003
      targetPort: hazelcast
      protocol: TCP
      name: hazelcast
  selector:
    app: sonarqube-dce
    release: ingress-with-controller.yaml
---
# Source: sonarqube-dce/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ingress-with-controller.yaml-sonarqube-dce-search
  labels:
    app: sonarqube-dce
    chart: sonarqube-dce-2025.2.0
    release: ingress-with-controller.yaml
    heritage: Helm

spec:
  type: ClusterIP
  ports:
    - port: 9001
      targetPort: search-port
      protocol: TCP
      name: search
    - port: 9002
      targetPort: es-port
      protocol: TCP
      name: es
  selector:
    app: sonarqube-dce-search
    release: ingress-with-controller.yaml
---
# Source: sonarqube-dce/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ingress-with-controller.yaml-sonarqube-dce-search-headless
  labels:
    app: sonarqube-dce
    chart: sonarqube-dce-2025.2.0
    release: ingress-with-controller.yaml
    heritage: Helm

spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 9001
      targetPort: search-port
      protocol: TCP
      name: search
    - port: 9002
      targetPort: es-port
      protocol: TCP
      name: es
  selector:
    app: sonarqube-dce-search
    release: ingress-with-controller.yaml
---
# Source: sonarqube-dce/charts/ingress-nginx/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.12.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/version: "1.12.1"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: ingress-with-controller.yaml-ingress-nginx-controller
  namespace: default
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/instance: ingress-with-controller.yaml
      app.kubernetes.io/component: controller
  replicas: 1
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      labels:
        helm.sh/chart: ingress-nginx-4.12.1
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/instance: ingress-with-controller.yaml
        app.kubernetes.io/version: "1.12.1"
        app.kubernetes.io/part-of: ingress-nginx
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: controller
    spec:
      dnsPolicy: ClusterFirst
      containers:
        - name: controller
          image: registry.k8s.io/ingress-nginx/controller:v1.12.1@sha256:d2fbc4ec70d8aa2050dd91a91506e998765e86c96f32cffb56c503c9c34eed5b
          imagePullPolicy: IfNotPresent
          lifecycle: 
            preStop:
              exec:
                command:
                - /wait-shutdown
          args: 
            - /nginx-ingress-controller
            - --publish-service=$(POD_NAMESPACE)/ingress-with-controller.yaml-ingress-nginx-controller
            - --election-id=ingress-with-controller.yaml-ingress-nginx-leader
            - --controller-class=k8s.io/ingress-nginx
            - --ingress-class=nginx
            - --configmap=$(POD_NAMESPACE)/ingress-with-controller.yaml-ingress-nginx-controller
            - --validating-webhook=:8443
            - --validating-webhook-certificate=/usr/local/certificates/cert
            - --validating-webhook-key=/usr/local/certificates/key
          securityContext: 
            runAsNonRoot: true
            runAsUser: 101
            runAsGroup: 82
            allowPrivilegeEscalation: false
            seccompProfile: 
              type: RuntimeDefault
            capabilities:
              drop:
              - ALL
              add:
              - NET_BIND_SERVICE
            readOnlyRootFilesystem: false
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LD_PRELOAD
              value: /usr/local/lib/libmimalloc.so
          livenessProbe: 
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe: 
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: webhook
              containerPort: 8443
              protocol: TCP
          volumeMounts:
            - name: webhook-cert
              mountPath: /usr/local/certificates/
              readOnly: true
          resources: 
            requests:
              cpu: 100m
              memory: 90Mi
      nodeSelector: 
        kubernetes.io/os: linux
      serviceAccountName: ingress-with-controller.yaml-ingress-nginx
      terminationGracePeriodSeconds: 300
      volumes:
        - name: webhook-cert
          secret:
            secretName: ingress-with-controller.yaml-ingress-nginx-admission
---
# Source: sonarqube-dce/templates/sonarqube-application.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-with-controller.yaml-sonarqube-dce-app
  labels:
    app: sonarqube-dce
    chart: sonarqube-dce-2025.2.0
    release: ingress-with-controller.yaml
    heritage: Helm
    app.kubernetes.io/name: ingress-with-controller.yaml
    sonarqube.datacenter/type: "app"
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sonarqube
    app.kubernetes.io/component: ingress-with-controller.yaml-sonarqube-dce
    app.kubernetes.io/version: "2025.2.0-datacenter-app"
spec:
  replicas: 2
  revisionHistoryLimit: 
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: sonarqube-dce
      release: ingress-with-controller.yaml
  template:
    metadata:
      labels:
        app: sonarqube-dce
        release: ingress-with-controller.yaml
        sonarqube.datacenter/type: "app"
      annotations:
        checksum/plugins: a6b1750680bf20aef4a5421d9a42a100a9402190dd6898d0aa4713d746c3995a
        checksum/config: 4ad5a00d45d69411e6cef72739a2c873e3482da5f57ae777fed8c751e852f015
        checksum/secret: b01f93a21654bbe32768ae66b9b3fdd3ebd9106a68c9ff42eb1474c8e9f7d647
    spec:
      automountServiceAccountToken: false
      initContainers:
        - name: "wait-for-db"
          image: sonarqube:2025.2.0-datacenter-app
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          resources:
            {}
          command: ["/bin/bash", "-c"]
          args: ['set -o pipefail;for i in {1..200};do (echo > /dev/tcp/ingress-with-controller.yaml-postgresql/5432) && exit 0; sleep 2;done; exit 1']
      securityContext:
        fsGroup: 0
      containers:
        - name: sonarqube-dce
          image: sonarqube:2025.2.0-datacenter-app
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
            - name: hazelcast
              containerPort: 9003
              protocol: TCP
          resources:
            limits:
              cpu: 800m
              ephemeral-storage: 512000M
              memory: 4096M
            requests:
              cpu: 400m
              ephemeral-storage: 1536M
              memory: 4096M
          env:
            - name: SONAR_WEB_CONTEXT
              value: /
            - name: SONAR_WEB_JAVAOPTS
              value: ""
            - name: SONAR_CE_JAVAOPTS
              value: ""
            - name: SONAR_LOG_JSONOUTPUT
              value: "false"
            - name: SONAR_HELM_CHART_VERSION
              value: 2025.2.0
            - name: SONAR_CLUSTER_SEARCH_HOSTS
              value: "ingress-with-controller.yaml-sonarqube-dce-search"
            - name: SONAR_CLUSTER_KUBERNETES
              value: "true"
            - name: SONAR_CLUSTER_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SONAR_CLUSTER_HOSTS
              value: "ingress-with-controller.yaml-sonarqube-dce-headless"
            - name: SONAR_AUTH_JWTBASE64HS256SECRET
              valueFrom:
                secretKeyRef:
                  name: "ingress-with-controller.yaml-sonarqube-dce-jwt"
                  key: SONAR_AUTH_JWTBASE64HS256SECRET
            - name: SONAR_JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ingress-with-controller.yaml-postgresql
                  key: postgresql-password
            - name: SONAR_WEB_SYSTEMPASSCODE
              valueFrom:
                secretKeyRef:
                  name: ingress-with-controller.yaml-sonarqube-dce-monitoring-passcode
                  key: SONAR_WEB_SYSTEMPASSCODE
          envFrom:
            - configMapRef:
                name: ingress-with-controller.yaml-sonarqube-dce-jdbc-config
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - |-
                host="$(hostname -i || echo '127.0.0.1')"
                wget --no-proxy --quiet -O /dev/null --timeout=1 --header="X-Sonar-Passcode: $SONAR_WEB_SYSTEMPASSCODE" "http://${host}:9000/api/system/liveness"
            failureThreshold: 6
            initialDelaySeconds: 0
            periodSeconds: 30
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - |-
                #!/bin/bash
                # A Sonarqube container is considered ready if the status is UP, DB_MIGRATION_NEEDED or DB_MIGRATION_RUNNING
                # status about migration are added to prevent the node to be kill while sonarqube is upgrading the database.
                host="$(hostname -i || echo '127.0.0.1')"
                if wget --no-proxy -qO- http://${host}:9000/api/system/status | grep -q -e '"status":"UP"' -e '"status":"DB_MIGRATION_NEEDED"' -e '"status":"DB_MIGRATION_RUNNING"'; then
                  exit 0
                fi
                exit 1
            failureThreshold: 8
            initialDelaySeconds: 0
            periodSeconds: 30
            timeoutSeconds: 1
          startupProbe:
            httpGet:
              scheme: HTTP
              path: /api/system/status
              port: http
            initialDelaySeconds: 45
            periodSeconds: 10
            failureThreshold: 32
            timeoutSeconds: 1
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /opt/sonarqube/data
              name: sonarqube
              subPath: data
            - mountPath: /opt/sonarqube/temp
              name: sonarqube
              subPath: temp
            - mountPath: /opt/sonarqube/logs
              name: sonarqube
              subPath: logs
            - mountPath: /tmp
              name: tmp-dir
      serviceAccountName: default
      volumes:
      
      - name: install-plugins
        configMap:
          name: ingress-with-controller.yaml-sonarqube-dce-install-plugins
          items:
            - key: install_plugins.sh
              path: install_plugins.sh
      - name: sonarqube
        emptyDir:
          {}
      - name : tmp-dir
        emptyDir:
          {}
---
# Source: sonarqube-dce/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ingress-with-controller.yaml-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.0
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: default
spec:
  serviceName: ingress-with-controller.yaml-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: ingress-with-controller.yaml
      role: primary
  template:
    metadata:
      name: ingress-with-controller.yaml-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.15.0
        app.kubernetes.io/instance: ingress-with-controller.yaml
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: ingress-with-controller.yaml
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: ingress-with-controller.yaml-postgresql
          image: docker.io/bitnami/postgresql:11.14.0-debian-10-r22
          imagePullPolicy: "IfNotPresent"
          resources:
            limits:
              cpu: 2
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ingress-with-controller.yaml-postgresql
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: "sonarUser"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ingress-with-controller.yaml-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "sonarDB"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "sonarUser" -d "dbname=sonarDB" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "sonarUser" -d "dbname=sonarDB" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "20Gi"
---
# Source: sonarqube-dce/templates/sonarqube-search.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ingress-with-controller.yaml-sonarqube-dce-search
  labels:
    app: sonarqube-dce
    chart: sonarqube-dce-2025.2.0
    release: ingress-with-controller.yaml
    heritage: Helm
    app.kubernetes.io/name: "ingress-with-controller.yaml"
    sonarqube.datacenter/type: "search"
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sonarqube
    app.kubernetes.io/component: ingress-with-controller.yaml-sonarqube-dce
    app.kubernetes.io/version: "2025.2.0-datacenter-search"
spec:
  podManagementPolicy : Parallel
  replicas: 3
  serviceName: ingress-with-controller.yaml-sonarqube-dce-search
  selector:
    matchLabels:
      app: sonarqube-dce-search
      release: ingress-with-controller.yaml
  volumeClaimTemplates:
  - metadata:
      name: ingress-with-controller.yaml-sonarqube-dce
      labels:
        release: ingress-with-controller.yaml
        chart: "sonarqube-dce"
        app: "ingress-with-controller.yaml-sonarqube-dce"
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: "5Gi"
  template:
    metadata:
      labels:
        app: sonarqube-dce-search
        release: ingress-with-controller.yaml
        sonarqube.datacenter/type: "search"
      annotations:
        checksum/init-sysctl: 9d87e98da57a4132b52585a41a1b37b65b457ea1d22df3443cbd28d5f8d923ce
        checksum/init-fs: 561ad49dd845ad5d9ab12f365b7f89b123b01343a8d6b4303ed779176bac1aa4
        checksum/config: 4ad5a00d45d69411e6cef72739a2c873e3482da5f57ae777fed8c751e852f015
        checksum/secret: b01f93a21654bbe32768ae66b9b3fdd3ebd9106a68c9ff42eb1474c8e9f7d647
    spec:
      automountServiceAccountToken: false
      initContainers:
        - name: init-sysctl
          image: sonarqube:2025.2.0-datacenter-app
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
            readOnlyRootFilesystem: true
            runAsUser: 0
          resources:
            {}
          command: ["/bin/bash",
            "-e",
            "/tmp/scripts/init_sysctl.sh"]
          volumeMounts:
            - name: init-sysctl
              mountPath: /tmp/scripts/
        - name: init-fs
          image: sonarqube:2025.2.0-datacenter-app
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities:
              add:
              - CHOWN
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
            seccompProfile:
              type: RuntimeDefault
          resources:
            {}
          command: ["sh",
            "-ex",
            "/tmp/scripts/init_fs.sh"]
          volumeMounts:
            - name: init-fs
              mountPath: /tmp/scripts/
            - mountPath: /opt/sonarqube/certs
              name: "ingress-with-controller.yaml-sonarqube-dce"
              subPath: certs
            - mountPath: /opt/sonarqube/data
              name: "ingress-with-controller.yaml-sonarqube-dce"
              subPath: data
            - mountPath: /opt/sonarqube/temp
              name: "ingress-with-controller.yaml-sonarqube-dce"
              subPath: temp
            - mountPath: /opt/sonarqube/logs
              name: "ingress-with-controller.yaml-sonarqube-dce"
              subPath: logs
            - mountPath: /tmp
              name: tmp-dir
      securityContext:
        fsGroup: 0
      containers:
        - name: sonarqube-dce-search
          image: "sonarqube:2025.2.0-datacenter-search"
          imagePullPolicy: IfNotPresent
          ports:
            - name: search-port
              containerPort: 9001
              protocol: TCP
            - name: es-port
              containerPort: 9002
              protocol: TCP
          resources:
            limits:
              cpu: 800m
              ephemeral-storage: 512000M
              memory: 3072M
            requests:
              cpu: 400m
              ephemeral-storage: 1536M
              memory: 3072M
          env:
            - name: SONAR_LOG_JSONOUTPUT
              value: "false"
            - name: SONAR_CLUSTER_ES_HOSTS
              value: "ingress-with-controller.yaml-sonarqube-dce-search-0,ingress-with-controller.yaml-sonarqube-dce-search-1,ingress-with-controller.yaml-sonarqube-dce-search-2,"
            - name: SONAR_CLUSTER_ES_DISCOVERY_SEED_HOSTS
              value: "ingress-with-controller.yaml-sonarqube-dce-search-headless"
            - name: SONAR_CLUSTER_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - |
                #!/bin/bash
                # A Sonarqube search node container is considered live if http call returns 200
                host="$(hostname -i || echo '127.0.0.1')"
                if wget --auth-no-challenge --no-proxy -qO- "http://${host}:9001/_cluster/health?local=true" | grep -q -e '"status":"green"' -e '"status":"yellow"'; then
                  exit 0
                fi
                exit 1
            initialDelaySeconds: 0
            periodSeconds: 30
            failureThreshold: 6
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - |
                #!/bin/bash
                # A Sonarqube search node container is considered ready if the status of embedded ES is green or yellow
                host="$(hostname -i || echo '127.0.0.1')"
                if wget --auth-no-challenge --no-proxy -qO- "http://${host}:9001/_cluster/health?wait_for_status=yellow&timeout=50s" | grep -q -e '"status":"green"' -e '"status":"yellow"'; then
                  exit 0
                fi
                exit 1
            initialDelaySeconds: 0
            periodSeconds: 30
            failureThreshold: 6
            timeoutSeconds: 1
          startupProbe:
            exec:
             command:
              - sh
              - -c
              - |
                #!/bin/bash
                # A Sonarqube search node container is considered started if http call returns 200
                host="$(hostname -i || echo '127.0.0.1')"
                if wget --auth-no-challenge --no-proxy -qO- "http://${host}:9001/_cluster/health?local=true" | grep -q -e '"status":"green"' -e '"status":"yellow"'; then
                  exit 0
                fi
                exit 1
            initialDelaySeconds: 20
            periodSeconds: 10
            failureThreshold: 24
            timeoutSeconds: 1
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /opt/sonarqube/certs
              name: "ingress-with-controller.yaml-sonarqube-dce"
              subPath: certs
              readOnly: true
            - mountPath: /opt/sonarqube/data
              name: "ingress-with-controller.yaml-sonarqube-dce"
              subPath: data
            - mountPath: /opt/sonarqube/temp
              name: "ingress-with-controller.yaml-sonarqube-dce"
              subPath: temp
            - mountPath: /opt/sonarqube/logs
              name: "ingress-with-controller.yaml-sonarqube-dce"
              subPath: logs
            - mountPath: /tmp
              name: tmp-dir
      serviceAccountName: default
      volumes:
      
      - name: init-sysctl
        configMap:
          name: ingress-with-controller.yaml-sonarqube-dce-init-sysctl
          items:
            - key: init_sysctl.sh
              path: init_sysctl.sh
      - name: init-fs
        configMap:
          name: ingress-with-controller.yaml-sonarqube-dce-init-fs
          items:
            - key: init_fs.sh
              path: init_fs.sh
      - name: "ingress-with-controller.yaml-sonarqube-dce"
      - name : tmp-dir
        emptyDir:
          {}
---
# Source: sonarqube-dce/charts/ingress-nginx/templates/controller-ingressclass.yaml
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.12.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/version: "1.12.1"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: nginx
spec:
  controller: k8s.io/ingress-nginx
---
# Source: sonarqube-dce/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-with-controller.yaml-sonarqube-dce
  labels:
    app: sonarqube-dce
    chart: sonarqube-dce-2025.2.0
    release: ingress-with-controller.yaml
    heritage: Helm
    traffic-type: external
  annotations:
    kubernetes.io/ingress.class: "nginx"
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "64m"
spec:
  ingressClassName: "nginx"
  rules:
  - host: sonarqube.your-org.com
    http:
      paths:
      - backend:
          service:
            name: someService
            port:
              number: 1010
        path: /
        pathType: ImplementationSpecific
  tls:
    - hosts:
      - chart-example.local
      secretName: chart-example-tls
---
# Source: sonarqube-dce/charts/ingress-nginx/templates/controller-poddisruptionbudget.yaml
# PDB is not supported for DaemonSets.
# https://github.com/kubernetes/kubernetes/issues/108124
---
# Source: sonarqube-dce/charts/ingress-nginx/templates/admission-webhooks/validating-webhook.yaml
# before changing this value, check the required kubernetes version
# https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#prerequisites
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
  labels:
    helm.sh/chart: ingress-nginx-4.12.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/version: "1.12.1"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
  name: ingress-with-controller.yaml-ingress-nginx-admission
webhooks:
  - name: validate.nginx.ingress.kubernetes.io
    matchPolicy: Equivalent
    rules:
      - apiGroups:
          - networking.k8s.io
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
        resources:
          - ingresses
    failurePolicy: Fail
    sideEffects: None
    admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: ingress-with-controller.yaml-ingress-nginx-controller-admission
        namespace: default
        port: 443
        path: /networking/v1/ingresses
---
# Source: sonarqube-dce/charts/ingress-nginx/templates/admission-webhooks/job-patch/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ingress-with-controller.yaml-ingress-nginx-admission
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.12.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/version: "1.12.1"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
automountServiceAccountToken: true
---
# Source: sonarqube-dce/charts/ingress-nginx/templates/admission-webhooks/job-patch/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ingress-with-controller.yaml-ingress-nginx-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.12.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/version: "1.12.1"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
    verbs:
      - get
      - update
---
# Source: sonarqube-dce/charts/ingress-nginx/templates/admission-webhooks/job-patch/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ingress-with-controller.yaml-ingress-nginx-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.12.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/version: "1.12.1"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ingress-with-controller.yaml-ingress-nginx-admission
subjects:
  - kind: ServiceAccount
    name: ingress-with-controller.yaml-ingress-nginx-admission
    namespace: default
---
# Source: sonarqube-dce/charts/ingress-nginx/templates/admission-webhooks/job-patch/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ingress-with-controller.yaml-ingress-nginx-admission
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.12.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/version: "1.12.1"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
---
# Source: sonarqube-dce/charts/ingress-nginx/templates/admission-webhooks/job-patch/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ingress-with-controller.yaml-ingress-nginx-admission
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.12.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/version: "1.12.1"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ingress-with-controller.yaml-ingress-nginx-admission
subjects:
  - kind: ServiceAccount
    name: ingress-with-controller.yaml-ingress-nginx-admission
    namespace: default
---
# Source: sonarqube-dce/templates/tests/sonarqube-test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "ingress-with-controller.yaml-ui-test"
  annotations:
    "helm.sh/hook": test-success
  labels:
    app: sonarqube-dce
    chart: sonarqube-dce-2025.2.0
    release: ingress-with-controller.yaml
    heritage: Helm
spec:
  automountServiceAccountToken: false
  containers:
    - name: ingress-with-controller.yaml-ui-test
      image: "sonarqube:2025.2.0-datacenter-app"
      imagePullPolicy: IfNotPresent
      command: ['wget']
      args: [
        '--retry-connrefused',
        '--waitretry=1',
        '--timeout=5',
        '-t',
        '1200',
        '-qO-',
        'ingress-with-controller.yaml-sonarqube-dce:9000/api/system/status'
        ]
      resources:
        limits:
          cpu: 500m
          ephemeral-storage: 1000M
          memory: 200M
        requests:
          cpu: 500m
          ephemeral-storage: 100M
          memory: 200M
  restartPolicy: Never
---
# Source: sonarqube-dce/charts/ingress-nginx/templates/admission-webhooks/job-patch/job-createSecret.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: ingress-with-controller.yaml-ingress-nginx-admission-create
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.12.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/version: "1.12.1"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
spec:
  template:
    metadata:
      name: ingress-with-controller.yaml-ingress-nginx-admission-create
      labels:
        helm.sh/chart: ingress-nginx-4.12.1
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/instance: ingress-with-controller.yaml
        app.kubernetes.io/version: "1.12.1"
        app.kubernetes.io/part-of: ingress-nginx
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admission-webhook
    spec:
      containers:
        - name: create
          image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.5.2@sha256:e8825994b7a2c7497375a9b945f386506ca6a3eda80b89b74ef2db743f66a5ea
          imagePullPolicy: IfNotPresent
          args:
            - create
            - --host=ingress-with-controller.yaml-ingress-nginx-controller-admission,ingress-with-controller.yaml-ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
            - --namespace=$(POD_NAMESPACE)
            - --secret-name=ingress-with-controller.yaml-ingress-nginx-admission
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          securityContext: 
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
            seccompProfile:
              type: RuntimeDefault
      restartPolicy: OnFailure
      serviceAccountName: ingress-with-controller.yaml-ingress-nginx-admission
      nodeSelector: 
        kubernetes.io/os: linux
---
# Source: sonarqube-dce/charts/ingress-nginx/templates/admission-webhooks/job-patch/job-patchWebhook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: ingress-with-controller.yaml-ingress-nginx-admission-patch
  namespace: default
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.12.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-with-controller.yaml
    app.kubernetes.io/version: "1.12.1"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
spec:
  template:
    metadata:
      name: ingress-with-controller.yaml-ingress-nginx-admission-patch
      labels:
        helm.sh/chart: ingress-nginx-4.12.1
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/instance: ingress-with-controller.yaml
        app.kubernetes.io/version: "1.12.1"
        app.kubernetes.io/part-of: ingress-nginx
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admission-webhook
    spec:
      containers:
        - name: patch
          image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.5.2@sha256:e8825994b7a2c7497375a9b945f386506ca6a3eda80b89b74ef2db743f66a5ea
          imagePullPolicy: IfNotPresent
          args:
            - patch
            - --webhook-name=ingress-with-controller.yaml-ingress-nginx-admission
            - --namespace=$(POD_NAMESPACE)
            - --patch-mutating=false
            - --secret-name=ingress-with-controller.yaml-ingress-nginx-admission
            - --patch-failure-policy=Fail
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          securityContext: 
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
            seccompProfile:
              type: RuntimeDefault
      restartPolicy: OnFailure
      serviceAccountName: ingress-with-controller.yaml-ingress-nginx-admission
      nodeSelector: 
        kubernetes.io/os: linux
