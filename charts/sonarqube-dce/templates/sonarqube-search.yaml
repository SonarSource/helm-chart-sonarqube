apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "sonarqube.fullname" . }}-search
  labels:
    app: {{ template "sonarqube.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    app.kubernetes.io/name: {{ template "sonarqube.name" . }}-{{ template "sonarqube.fullname" . }}
    sonarqube.datacenter/type: "search"
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: sonarqube
    app.kubernetes.io/component: {{ template "sonarqube.fullname" . }}
    app.kubernetes.io/version: {{ .Values.searchNodes.image.tag | quote }}
spec:
  podManagementPolicy : Parallel
  replicas: {{ .Values.searchNodes.replicaCount }}
  serviceName: {{ template "sonarqube.fullname" . }}-search
  selector:
    matchLabels:
      app: {{ template "sonarqube.name" . }}-search
      release: {{ .Release.Name }}
{{- if .Values.searchNodes.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: {{ template "sonarqube.fullname" . }}
      labels:
        release: {{ .Release.Name }}
        chart: "{{ .Chart.Name }}"
        app: "{{ template "sonarqube.fullname" . }}"
    {{- with .Values.searchNodes.persistence.annotations  }}
      annotations:
{{ toYaml . | indent 8 }}
    {{- end }}
    spec:
      accessModes:
        - {{ .Values.searchNodes.persistence.accessMode | quote }}
      resources:
        requests:
          storage: {{ .Values.searchNodes.persistence.size | quote }}
    {{- if .Values.searchNodes.persistence.storageClass }}
    {{- if (eq "-" .Values.searchNodes.persistence.storageClass) }}
      storageClassName: ""
    {{- else }}
      storageClassName: "{{ .Values.searchNodes.persistence.storageClass }}"
    {{- end }}
    {{- end }}
  {{- end }}
  template:
    metadata:
      labels:
        app: {{ template "sonarqube.name" . }}-search
        release: {{ .Release.Name }}
        sonarqube.datacenter/type: "search"
{{- with .Values.podLabels }}
{{ toYaml . | indent 8 }}
{{- end }}
      annotations:
        checksum/init-sysctl: {{ include (print $.Template.BasePath "/init-sysctl.yaml") . | sha256sum }}
        checksum/init-fs: {{ include (print $.Template.BasePath "/init-fs.yaml") . | sha256sum }}
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
{{- if .Values.annotations}}
      {{- range $key, $value := .Values.annotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
{{- end }}
    spec:
      {{- if or .Values.searchNodes.image.pullSecrets .Values.searchNodes.image.pullSecret }}
      imagePullSecrets:
        {{- if .Values.searchNodes.image.pullSecret }}
        - name: {{ .Values.searchNodes.image.pullSecret }}
        {{- end }}
        {{- if .Values.searchNodes.image.pullSecrets }}
{{ toYaml .Values.searchNodes.image.pullSecrets | indent 8 }}
        {{- end }}
      {{- end }}
      initContainers:
      {{- if .Values.extraInitContainers }}
{{ toYaml .Values.extraInitContainers | indent 8 }}
      {{- end }}
      {{- if or .Values.initSysctl.enabled }}
      {{- if .Values.caCerts.enabled }}
        - name: ca-certs
          image: {{ default "adoptopenjdk/openjdk11:alpine" .Values.caCerts.image }}
          imagePullPolicy: {{ .Values.searchNodes.image.pullPolicy  }}
          command: ["sh"]
          args: ["-c", "cp -f \"${JAVA_HOME}/lib/security/cacerts\" /tmp/certs/cacerts; if [ \"$(ls /tmp/secrets/ca-certs)\" ]; then for f in /tmp/secrets/ca-certs/*; do keytool -importcert -file \"${f}\" -alias \"$(basename \"${f}\")\" -keystore /tmp/certs/cacerts -storepass changeit -trustcacerts -noprompt; done; fi;"]
          {{- if $securityContext := .Values.initContainers.securityContext }}
          securityContext:
{{ toYaml $securityContext | indent 12 }}
          {{- end }}
          resources:
{{ toYaml .Values.initContainers.resources | indent 12 }}
          volumeMounts:
            - mountPath: /tmp/certs
              name: "{{ template "sonarqube.fullname" . }}"
              subPath: certs
            - mountPath: /tmp/secrets/ca-certs
              name: ca-certs
          {{- with .Values.env }}
          env:
            {{- . | toYaml | trim | nindent 12 }}
          {{- end }}
      {{- end }}
        - name: init-sysctl
          image: {{ default "busybox:1.32" .Values.initSysctl.image }}
          imagePullPolicy: {{ .Values.searchNodes.image.pullPolicy  }}
          {{- if $securityContext := (default .Values.initContainers.securityContext .Values.initSysctl.securityContext) }}
          securityContext:
{{ toYaml $securityContext | indent 12 }}
          {{- end }}
          resources:
{{ toYaml (default .Values.initContainers.resources .Values.initSysctl.resources) | indent 12 }}
          command: ["sh",
            "-e",
            "/tmp/scripts/init_sysctl.sh"]
          volumeMounts:
            - name: init-sysctl
              mountPath: /tmp/scripts/
          {{- with .Values.env }}
          env:
            {{- . | toYaml | trim | nindent 12 }}
          {{- end }}
      {{- end }}
      {{- if and .Values.searchNodes.persistence.enabled .Values.initFs.enabled }}
      {{- if or .Values.searchNodes.sonarProperties .Values.searchNodes.sonarSecretProperties .Values.sonarSecretKey }}
        - name: concat-properties
          image: {{ default "busybox:1.32" .Values.initContainers.image }}
          imagePullPolicy: {{ .Values.searchNodes.image.pullPolicy  }}
          command: 
          - sh
          - -c
          - |
            #!/bin/sh
            if [ -f /tmp/props/sonar.properties ]; then
              cat /tmp/props/sonar.properties > /tmp/result/sonar.properties
            fi
            if [ -f /tmp/props/secret.properties ]; then
              cat /tmp/props/secret.properties > /tmp/result/sonar.properties
            fi
            if [ -f /tmp/props/sonar.properties -a -f /tmp/props/secret.properties ]; then
              awk 1 /tmp/props/sonar.properties /tmp/props/secret.properties > /tmp/result/sonar.properties
            fi
          volumeMounts:
          {{- if or .Values.searchNodes.sonarProperties .Values.sonarSecretKey }}
            - mountPath: /tmp/props/sonar.properties
              name: config
              subPath: sonar.properties
          {{- end }}
          {{- if .Values.searchNodes.sonarSecretProperties }}
            - mountPath: /tmp/props/secret.properties
              name: secret-config
              subPath: secret.properties
          {{- end }}
            - mountPath: /tmp/result
              name: concat-dir
          {{- if $securityContext := .Values.initContainers.securityContext }}
          securityContext:
{{ toYaml $securityContext | indent 12 }}
          {{- end }}
          resources:
{{ toYaml .Values.initContainers.resources | indent 12 }}
          {{- with .Values.env }}
          env:
            {{- . | toYaml | trim | nindent 12 }}
          {{- end }}
      {{- end }}
        - name: init-fs
          image: {{ default "busybox:1.32" .Values.initFs.image }}
          imagePullPolicy: {{ .Values.searchNodes.image.pullPolicy  }}
          {{- if $securityContext := (default .Values.initContainers.securityContext .Values.initFs.securityContext) }}
          securityContext:
{{ toYaml $securityContext | indent 12 }}
          {{- end }}
          resources:
{{ toYaml (default .Values.initContainers.resources .Values.initFs.resources) | indent 12 }}
          command: ["sh",
            "-e",
            "/tmp/scripts/init_fs.sh"]
          volumeMounts:
            - name: init-fs
              mountPath: /tmp/scripts/
{{- if .Values.searchNodes.persistence.mounts }}
{{ toYaml .Values.searchNodes.persistence.mounts | indent 12 }}
{{- end }}
            {{- if .Values.caCerts }}
            - mountPath: {{ .Values.sonarqubeFolder }}/certs
              name: "{{ template "sonarqube.fullname" . }}"
              subPath: certs
            {{- end }}
            - mountPath: {{ .Values.sonarqubeFolder }}/data
              name: "{{ template "sonarqube.fullname" . }}"
              subPath: data
            {{- end }}
            - mountPath: {{ .Values.sonarqubeFolder }}/temp
              name: "{{ template "sonarqube.fullname" . }}"
              subPath: temp
            - mountPath: {{ .Values.sonarqubeFolder }}/logs
              name: "{{ template "sonarqube.fullname" . }}"
              subPath: logs
            - mountPath: /tmp
              name: tmp-dir
      containers:
      {{- if .Values.searchNodes.extraContainers }}
        {{- toYaml .Values.searchNodes.extraContainers | nindent 8 }}
      {{- end }}
        - name: {{ .Chart.Name }}-search
          image: "{{ .Values.searchNodes.image.repository }}:{{ .Values.searchNodes.image.tag }}"
          imagePullPolicy: {{ .Values.searchNodes.image.pullPolicy }}
          ports:
            - name: search-port
              containerPort: 9001
              protocol: TCP
            - name: es-port
              containerPort: 9002
              protocol: TCP
          resources:
{{ toYaml (default .Values.searchNodes.resources .Values.resource) | indent 12 }}
          env:
            - name: SONAR_LOG_JSONOUTPUT
              value: "{{ .Values.logging.jsonOutput }}"
            - name: SONAR_CLUSTER_ES_HOSTS
              value: "{{ template "searchNodes.endpoints" . }}"
            - name: SONAR_CLUSTER_ES_DISCOVERY_SEED_HOSTS
              value: "{{ template "sonarqube.fullname" . }}-search-headless"
            - name: SONAR_CLUSTER_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- if .Values.searchNodes.searchAuthentication.enabled }}
            - name: SONAR_CLUSTER_SEARCH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ template "search.userPassword" . }}" 
                  key: SONAR_CLUSTER_SEARCH_PASSWORD
            - name: SONAR_CLUSTER_ES_SSL_KEYSTORE
              value: "{{ .Values.sonarqubeFolder }}/es-secret/elastic-stack-ca.p12"
            - name: SONAR_CLUSTER_ES_SSL_TRUSTSTORE
              value: "{{ .Values.sonarqubeFolder }}/es-secret/elastic-stack-ca.p12"
            - name: SONAR_CLUSTER_ES_SSL_KEYSTOREPASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ template "search.ksPassword" . }}"
                  key: SONAR_CLUSTER_ES_SSL_KEYSTOREPASSWORD
            - name: SONAR_CLUSTER_ES_SSL_TRUSTSTOREPASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ template "search.ksPassword" . }}"
                  key: SONAR_CLUSTER_ES_SSL_TRUSTSTOREPASSWORD
            {{- end }}
            {{- with .Values.searchNodes.env }}
            {{- . | toYaml | trim | nindent 12 }}
            {{- end }}
{{- range .Values.extraConfig.secrets }}
            - secretRef:
                name: {{ . }}
{{- end }}
{{- range .Values.extraConfig.configmaps }}
            - configMapRef:
                name: {{ . }}
{{- end }}
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              {{ if .Values.searchNodes.searchAuthentication.enabled }}
              - |
                #!/bin/bash
                # A Sonarqube search node container is considered live if http call returns 200
                host="$(hostname -i || echo '127.0.0.1')"
                if wget -qO- "http://elastic:{{ .Values.searchNodes.searchAuthentication.userPassword }}@${host}:9001/_cluster/health?local=true" | grep -q -e '"status":"green"' -e '"status":"yellow"'; then
                  exit 0
                fi
                exit 1
              {{- else -}}
              - |
                #!/bin/bash
                # A Sonarqube search node container is considered live if http call returns 200
                host="$(hostname -i || echo '127.0.0.1')"
                if wget -qO- "http://${host}:9001/_cluster/health?local=true" | grep -q -e '"status":"green"' -e '"status":"yellow"'; then
                  exit 0
                fi
                exit 1
              {{- end }}
            initialDelaySeconds: {{ .Values.searchNodes.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.searchNodes.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.searchNodes.livenessProbe.failureThreshold }}
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              {{ if .Values.searchNodes.searchAuthentication.enabled }}
              - |
                #!/bin/bash
                # A Sonarqube search node container is considered ready if the status of embedded ES is green or yellow
                host="$(hostname -i || echo '127.0.0.1')"
                if wget -qO- "http://elastic:{{ .Values.searchNodes.searchAuthentication.userPassword }}@${host}:9001/_cluster/health?wait_for_status=yellow&timeout=50s" | grep -q -e '"status":"green"' -e '"status":"yellow"'; then
                  exit 0
                fi
                exit 1
              {{- else -}}
              - |
                #!/bin/bash
                # A Sonarqube search node container is considered ready if the status of embedded ES is green or yellow
                host="$(hostname -i || echo '127.0.0.1')"
                if wget -qO- "http://${host}:9001/_cluster/health?wait_for_status=yellow&timeout=50s" | grep -q -e '"status":"green"' -e '"status":"yellow"'; then
                  exit 0
                fi
                exit 1
              {{- end }}
            initialDelaySeconds: {{ .Values.searchNodes.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.searchNodes.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.searchNodes.readinessProbe.failureThreshold }}
          startupProbe:
            exec:
             command:
              - sh
              - -c
              {{ if .Values.searchNodes.searchAuthentication.enabled }}
              - |
                #!/bin/bash
                # A Sonarqube search node container is considered started if http call returns 200
                host="$(hostname -i || echo '127.0.0.1')"
                if wget -qO- "http://elastic:{{ .Values.searchNodes.searchAuthentication.userPassword }}@${host}:9001/_cluster/health?local=true" | grep -q -e '"status":"green"' -e '"status":"yellow"'; then
                  exit 0
                fi
                exit 1
              {{- else -}}
              - |
                #!/bin/bash
                # A Sonarqube search node container is considered started if http call returns 200
                host="$(hostname -i || echo '127.0.0.1')"
                if wget -qO- "http://${host}:9001/_cluster/health?local=true" | grep -q -e '"status":"green"' -e '"status":"yellow"'; then
                  exit 0
                fi
                exit 1
              {{- end }}
            initialDelaySeconds: {{ .Values.searchNodes.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.searchNodes.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.searchNodes.startupProbe.failureThreshold }}
          {{- if .Values.searchNodes.containerSecurityContext }}
          securityContext:
{{- toYaml .Values.searchNodes.containerSecurityContext | nindent 12 }}
          {{- end }}
          volumeMounts:
{{- if .Values.searchNodes.persistence.mounts }}
{{ toYaml .Values.searchNodes.persistence.mounts | indent 12 }}
{{- end }}
            {{- if or .Values.searchNodes.sonarProperties .Values.searchNodes.sonarSecretProperties .Values.sonarSecretKey }}
            - mountPath: {{ .Values.sonarqubeFolder }}/conf/sonar.properties
            subPath: sonar.properties
            name: concat-dir
            {{- end }}
            {{- if .Values.sonarSecretKey }}
            - mountPath: {{ .Values.sonarqubeFolder }}/secret/
              name: secret
              readOnly: true
            {{- end }}
            {{- if .Values.searchNodes.searchAuthentication.enabled }}
            - mountPath: {{ .Values.sonarqubeFolder }}/es-secret/
              name: es-secret
              readOnly: true
            {{- end }}
            {{- if .Values.caCerts }}
            - mountPath: {{ .Values.sonarqubeFolder }}/certs
              name: "{{ template "sonarqube.fullname" . }}"
              subPath: certs
              readOnly: true
            {{- end }}
            - mountPath: {{ .Values.sonarqubeFolder }}/data
              name: "{{ template "sonarqube.fullname" . }}"
              subPath: data
            - mountPath: {{ .Values.sonarqubeFolder }}/temp
              name: "{{ template "sonarqube.fullname" . }}"
              subPath: temp
            - mountPath: {{ .Values.sonarqubeFolder }}/logs
              name: "{{ template "sonarqube.fullname" . }}"
              subPath: logs
            - mountPath: /tmp
              name: tmp-dir
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
    {{- end }}
    {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
    {{- end }}
      serviceAccountName: {{ template "sonarqube.serviceAccountName" . }}
      volumes:
{{- if .Values.searchNodes.persistence.volumes }}
{{ tpl (toYaml .Values.searchNodes.persistence.volumes | indent 6) . }}
{{- end }}
      {{- if .Values.sonarSecretKey }}
      - name: secret
        secret:
          secretName: {{ .Values.sonarSecretKey }}
          items:
          - key: sonar-secret.txt
            path: sonar-secret.txt
      {{- end }}
      {{- if or .Values.searchNodes.sonarProperties .Values.sonarSecretKey }}
      - name: config
        configMap:
          name: {{ template "sonarqube.fullname" . }}-search-config
          items:
          - key: sonar.properties
            path: sonar.properties
      {{- end }}
      {{- if .Values.searchNodes.sonarSecretProperties }}
      - name: secret-config
        secret:
          secretName: {{ .Values.searchNodes.sonarSecretProperties }}
          items:
          - key: secret.properties
            path: secret.properties
      {{- end }}
      {{- if .Values.searchNodes.searchAuthentication.enabled }}
      - name: es-secret
        secret:
          secretName: {{ .Values.searchNodes.searchAuthentication.keyStoreSecret }}
      {{- end }}
      {{- if .Values.caCerts }}
      - name: ca-certs
        secret:
          secretName: {{ .Values.caCerts.secret }}
      {{- end }}
      - name: init-sysctl
        configMap:
          name: {{ template "sonarqube.fullname" . }}-init-sysctl
          items:
            - key: init_sysctl.sh
              path: init_sysctl.sh
      - name: init-fs
        configMap:
          name: {{ template "sonarqube.fullname" . }}-init-fs
          items:
            - key: init_fs.sh
              path: init_fs.sh
      {{- if .Values.searchNodes.persistence.enabled }}
      - name: "{{ template "sonarqube.fullname" . }}"
      {{- else }}
      - name: "{{ template "sonarqube.fullname" . }}"
        emptyDir: {{- toYaml .Values.emptyDir | nindent 10 }}
      {{- end }}
      - name : tmp-dir
        emptyDir: {{- toYaml .Values.emptyDir | nindent 10 }}
        {{- if or .Values.searchNodes.sonarProperties .Values.searchNodes.sonarSecretProperties .Values.sonarSecretKey }}
      - name : concat-dir
        emptyDir: {{- toYaml .Values.emptyDir | nindent 10 -}}
        {{- end }}
